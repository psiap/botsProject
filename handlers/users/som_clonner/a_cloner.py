import asyncio
import datetime
import os
import zipfile

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import CommandStart
from aiogram.types import InputFile

from handlers.helps.met_support import create_array_account_proxy
from handlers.users.som_clonner.mass_cloner_account import Update_photo_name_TG
from keyboards.default import menu_start
from keyboards.default.start_menu import menu_start_data, menu_beck, menu_start_cloner, menu_clon_start
from loader import dp, bot


@dp.message_handler(text='ü¶πüèΩ‚Äç‚ôÄÔ∏è–ö–ª–æ–Ω–µ—Ä', state='*')
async def start(message: types.Message, state: FSMContext):
    proxy_file, sessions_len = create_array_account_proxy()
    __userid = message.from_user.id
    await message.answer(f"<b>üëë{message.from_user.first_name}üëë –í—ã –ø–µ—Ä–µ—à–µ–ª–∏ –≤ - ü¶πüèΩ‚Äç‚ôÄÔ∏è–ö–ª–æ–Ω–µ—Ä</b>\n\n"
                         f"<b>–ê–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è -</b> <code>{len(sessions_len)}</code>\n"
                         f"<b>–ü—Ä–æ–∫—Å–∏ –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è -</b> <code>{len(proxy_file)}</code>\n\n"
                         f"–ù–∞–∂–º–∏—Ç–µ <b>ü´°–£–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ</b> - —á—Ç–æ –±—ã –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ",reply_markup=menu_start_cloner)

@dp.message_handler(text='ü´°–£–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ', state='*')
async def start(message: types.Message, state: FSMContext):
    await message.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
                         f"–ü—Ä–∏–º–µ—Ä:")
    await message.answer(f"–ò–≤–∞–Ω", reply_markup=menu_beck)
    await state.set_state('clonename')


@dp.message_handler(state='clonename')
async def start(message: types.Message, state: FSMContext):
    await message.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–§–∞–º–∏–ª–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
                         f"–ü—Ä–∏–º–µ—Ä:")
    await message.answer(f"–ò–≤–∞–Ω–æ–≤", reply_markup=menu_beck)
    await state.update_data(name=message.text)
    await state.set_state('clonelastname')


@dp.message_handler(state='clonelastname')
async def start(message: types.Message, state: FSMContext):
    await message.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–ë–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
                         f"–ü—Ä–∏–º–µ—Ä:")
    await message.answer(f"–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –≥–∞–∑–∞ –≤ –ï–≤—Ä–æ–ø—É", reply_markup=menu_beck)
    await state.update_data(lastname=message.text)
    await state.set_state('clonebio')

@dp.message_handler(state='clonebio')
async def start(message: types.Message, state: FSMContext):
    await message.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–§–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
                         f"–ü—Ä–∏–º–µ—Ä:")
    photo = InputFile(
        fr"data/avatar/1.png"
    )
    await bot.send_photo(chat_id=message.chat.id, photo=photo)
    await state.update_data(bio=message.text)
    await state.set_state('clonephoto')

@dp.message_handler(state='clonephoto',content_types=['photo'])
async def add_channel_get_photo(message, state: FSMContext):
    await message.photo[-1].download(rf'data/avatar/1.png')
    data = await state.get_data()
    string_s = f"<b>–£ –Ω–∞—Å –ø–æ–ª—É—á–∏–ª–æ—Å—å:</b>\n" \
               f"–ò–º—è: {data['name']}\n" \
               f"–§–∞–º–∏–ª–∏—è: {data['lastname']}\n" \
               f"–ë–ò–û –ø—Ä–æ—Ñ–∏–ª—è: {data['bio']}\n\n" \
               f"<b>–ö–ª–æ–Ω–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã?</b>"

    photo = InputFile(
        fr"data/avatar/1.png"
    )
    await bot.send_photo(chat_id=message.chat.id, photo=photo,caption=string_s,reply_markup=menu_clon_start)


@dp.message_handler(text='üöÄ –ö–ª–æ–Ω–∏—Ä—É–µ–º', state='*')
async def start(message: types.Message, state: FSMContext):
    await message.answer(f"üöÄ –ö–ª–æ–Ω–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ—Å—å")
    data = await state.get_data()
    up_photo = Update_photo_name_TG(static_first_name=data['name'],
                                    static_last_name=data['lastname'],
                                    static_img=fr"data/avatar/1.png",
                                    static_about=data['bio'])

    await up_photo.__start__()
    proxy_file, sessions_len = create_array_account_proxy()
    __userid = message.from_user.id
    await message.answer(f"<b>üëë{message.from_user.first_name}üëë –í—ã –ø–µ—Ä–µ—à–µ–ª–∏ –≤ - ü¶πüèΩ‚Äç‚ôÄÔ∏è–ö–ª–æ–Ω–µ—Ä</b>\n\n"
                         f"<b>–ê–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è -</b> <code>{len(sessions_len)}</code>\n"
                         f"<b>–ü—Ä–æ–∫—Å–∏ –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è -</b> <code>{len(proxy_file)}</code>\n\n"
                         f"–ù–∞–∂–º–∏—Ç–µ <b>ü´°–£–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ</b> - —á—Ç–æ –±—ã –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ\n\n"
                         f"<b>üöÄ –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å</b>", reply_markup=menu_start_cloner)

